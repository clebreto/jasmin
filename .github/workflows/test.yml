name: Build
description: TEst

on:
  push:
    branches:
      - '*'

env:
  VERSION: development version at commit ${{ github.sha }} on branch ${{ github.head_ref }}
  NIXPKGS_ALLOW_UNFREE: 1

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup Nix Environment
      uses: ./.github/actions/setup-nix
    - name: Prepare dependencies
      run: |
        nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'sed -i -e "s|@VERSION@|${{ env.VERSION }}|" compiler/src/glob_options.ml'

  coq-program:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup Nix Environment
      uses: ./.github/actions/setup-nix
    - name: Build Coq Program
      env:
        EXTRA_NIX_ARGUMENTS: --arg coqDeps true
      run: |
        nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'make -j${{ env.NIX_BUILD_CORES }} -C compiler CIL'
    - name: Upload Coq Program Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coq-program-artifacts
        path: |
          compiler/src/CIL/
          proofs/

  coq-proof:
    runs-on: ubuntu-latest
    needs: coq-program
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Nix Environment
        uses: ./.github/actions/setup-nix
      - name: Run Coq Proofs
        env:
          EXTRA_NIX_ARGUMENTS: --arg coqDeps true
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'make -j${{ env.NIX_BUILD_CORES }} -C proofs'

  coq-master:
    runs-on: ubuntu-latest
    needs: prepare
    if: github.ref != 'refs/heads/release-*'  # Equivalent of the rule to skip for release branches
    continue-on-error: true  # Equivalent of 'allow_failure: true'
    steps:
      - name: Display HOME
        run: |
          echo $HOME
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Nix Environment
        uses: ./.github/actions/setup-nix
      - name: Setup Coq Master Dependencies
        env:
          EXTRA_NIX_ARGUMENTS: --arg inCI true false --arg coqDeps true --arg coqMaster true --option sandbox false
          HOME: ${{ github.workspace }}
          NIX_STORE_DIR: ${{ github.workspace }}/nix/store
          NIX_STATE_DIR: ${{ github.workspace }}/nix/var/nix
          NIX_LOG_DIR: ${{ github.workspace }}/nix/var/log/nix
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'make -j${{ env.NIX_BUILD_CORES }} -C proofs'

  ocaml:
    runs-on: ubuntu-latest
    needs: coq-program
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Nix Environment
        uses: ./.github/actions/setup-nix
      - name: Download Coq Program Artifacts
        uses: actions/download-artifact@v3
        with:
          name: coq-program-artifacts
      - name: Build OCaml
        env:
          EXTRA_NIX_ARGUMENTS: --arg ocamlDeps true
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'make -j${{ env.NIX_BUILD_CORES }} -C compiler'
      - name: Archive compiler
        run: tar -cvf compiler.tar ./compiler
      - name: Upload Ocaml Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ocaml-artifacts
          path: compiler.tar

  eclib:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        EASYCRYPT_REF: [release, dev]
    env:
      EXTRA_NIX_ARGUMENTS: --argstr ecRef ${{ matrix.EASYCRYPT_REF }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Nix Environment
        uses: ./.github/actions/setup-nix
      - name: Run EasyCrypt Why3 Configuration
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'easycrypt why3config -why3 eclib/why3.conf'
      - name: Run EasyCrypt Config
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'easycrypt config -why3 eclib/why3.conf'
      - name: Build eclib
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'make ECARGS="-why3 why3.conf" -C eclib'

  opam-compiler:
    runs-on: ubuntu-latest
    needs: coq-program
    env:
      OPAMROOTISOK: 'true'
      OPAMROOT: mapo
      EXTRA_NIX_ARGUMENTS: --arg opamDeps true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Nix Environment
        uses: ./.github/actions/setup-nix
      - name: Cache OPAM dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.OPAMROOT }}
          key: opam-${{ runner.os }}-${{ hashFiles('scripts/nixpkgs.nix') }}
          restore-keys: |
            opam-${{ runner.os }}-
      - name: Run OPAM Setup
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'scripts/opam-setup.sh'

      - name: Build Coq Program with OPAM
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run '
            eval $(opam env) &&
            make -C compiler -j${{ env.NIX_BUILD_CORES }} &&
            (cd compiler && mkdir -p bin && cp -L _build/install/default/bin/* bin/ && mkdir -p lib/jasmin/easycrypt && cp ../eclib/*.ec lib/jasmin/easycrypt/)'

      - name: Upload OPAM Compiler Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: opam-compiler-artifacts
          path: |
            compiler/bin/
            compiler/lib/

  tarball:
    runs-on: ubuntu-latest
    needs: coq-program
    env:
      EXTRA_NIX_ARGUMENTS: --arg testDeps true
      TARBALL: jasmin-compiler-${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Nix Environment
        uses: ./.github/actions/setup-nix
      - name: Build Tarball
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'make -C compiler dist DISTDIR=$TARBALL'
      - name: Upload Tarball Artifact
        uses: actions/upload-artifact@v3
        with:
          name: tarball-artifact
          path: compiler/${{ env.TARBALL }}.tgz

  build-from-tarball:
    runs-on: ubuntu-latest
    needs: tarball  # Ensures this job runs after tarball job
    env:
      TARBALL: jasmin-compiler-${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Nix Environment
        uses: ./.github/actions/setup-nix
      - name: Download Tarball Artifact
        uses: actions/download-artifact@v3
        with:
          name: tarball-artifact
          path: compiler/
      - name: Extract Tarball
        run: |
          tar -xvf compiler/${{ env.TARBALL }}.tgz
      - name: Build from Tarball
        run: |
          nix-build -o out ${{ env.TARBALL }}
      - name: Check Jasminc Version
        run: |
          ./out/bin/jasminc -version

  check:
    runs-on: ubuntu-latest
    needs:
      - coq-program
      - ocaml
    env:
      EXTRA_NIX_ARGUMENTS: --arg testDeps true --arg ocamlDeps true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Nix Environment
        uses: ./.github/actions/setup-nix
      - name: Download Ocaml Artifact
        uses: actions/download-artifact@v3
        with:
          name: ocaml-artifacts
      - name: Unarchive compiler
        run: tar -xvf compiler.tar
      - name: Display rights
        run: |
          ls -la ./compiler/*
      - name: Run jasmic version check
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run './compiler/jasminc -version'
      - name: Run dune tests
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'cd compiler && dune runtest'
      - name: Run make check-ci
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'make -j${{ env.NIX_BUILD_CORES }} -C compiler check-ci $EXTRA_MAKE_ARGUMENTS'

  check-proofs:
    runs-on: ubuntu-latest
    needs:
      - coq-program
      - ocaml
    strategy:
      matrix:
        EASYCRYPT_REF: [release, dev]
        CT_MODE: [CTG, CT]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Nix Environment
        uses: ./.github/actions/setup-nix
      - name: Download Ocaml Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ocaml-artifacts
      - name: Unarchive compiler
        run: tar -xvf compiler.tar
      - name: Set WHY3 Configuration
        run: echo "WHY3_CONF=${{ github.workspace }}/why3.conf" >> $GITHUB_ENV
      - name: Set EasyCrypt Arguments
        run: echo "ECARGS=-why3 ${{ github.workspace }}/why3.conf -I Jasmin:${{ github.workspace }}/eclib" >> $GITHUB_ENV
      - name: Run Jasminc Version Check
        env:
          EXTRA_NIX_ARGUMENTS: --arg testDeps true --argstr ecRef ${{ matrix.EASYCRYPT_REF }}
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run './compiler/jasminc -version'
      - name: Configure EasyCrypt - Why3
        env:
          EXTRA_NIX_ARGUMENTS: --arg testDeps true --argstr ecRef ${{ matrix.EASYCRYPT_REF }}
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'easycrypt why3config -why3 $WHY3_CONF'
      - name: Configure EasyCrypt
        env:
          EXTRA_NIX_ARGUMENTS: --arg testDeps true --argstr ecRef ${{ matrix.EASYCRYPT_REF }}
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'easycrypt config -why3 $WHY3_CONF'
      - name: Run Proofs
        env:
          EXTRA_NIX_ARGUMENTS: --arg testDeps true --argstr ecRef ${{ matrix.EASYCRYPT_REF }}
          CT_MODE: ${{ matrix.CT_MODE }}
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'make -C compiler/examples/gimli/proofs CT_MODE=$CT_MODE'

  libjade-compile-to-asm:
    runs-on: ubuntu-latest
    needs:
      - coq-program
      - ocaml
    env:
      EXTRA_NIX_ARGUMENTS: --arg testDeps true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Nix Environment
        uses: ./.github/actions/setup-nix
      - name: Download Ocaml Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ocaml-artifacts
      - name: Unarchive compiler
        run: tar -xvf compiler.tar
      - name: Run libjade test script
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run './scripts/test-libjade.sh src'
      - name: Upload libjade check.tar.gz as artifact
        uses: actions/upload-artifact@v3
        with:
          name: libjade-check
          path: libjade/src/check.tar.gz

  libjade-extract-to-ec:
    runs-on: ubuntu-latest
    needs:
      - coq-program
      - ocaml
    env:
      EXTRA_NIX_ARGUMENTS: --arg testDeps true --argstr ecRef release
      WHY3_CONF: ${{ github.workspace }}/why3.conf
      ECARGS: -why3 $WHY3_CONF -I Jasmin:${{ github.workspace }}/eclib
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Nix Environment
        uses: ./.github/actions/setup-nix
      - name: Download Ocaml Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ocaml-artifacts
      - name: Unarchive compiler
        run: tar -xvf compiler.tar
      - name: Set ECJOBS Variable
        run: echo "ECJOBS=${NIX_BUILD_CORES}" >> $GITHUB_ENV
      - name: Configure EasyCrypt with Why3
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run 'easycrypt why3config -why3 $WHY3_CONF'
      - name: Run libjade proof script
        run: |
          nix-shell --arg inCI true $EXTRA_NIX_ARGUMENTS --run './scripts/test-libjade.sh proof'
      - name: Upload proof artifacts
        uses: actions/upload-artifact@v3
        with:
          name: libjade-proof
          path: libjade/proof/check.tar.gz

  push-compiler-code:
    runs-on: ubuntu-latest
    needs: tarball
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Nix Environment
        uses: ./.github/actions/setup-nix
      - name: Download Tarball Artifact
        uses: actions/download-artifact@v3
        with:
          name: tarball-artifact
          path: compiler
      - name: Extract compiler
        run: |
          git config --global user.name "Jasmin Contributors"
          git config --global user.email "nobody@noreply.example.com"
          echo "${{ secrets.JASMIN_COMPILER_GITLAB_COM_CLEBRETO }}" | tr -d '\r' | ssh-add - > /dev/null
          git clone git@gitlab.com:clebreto/jasmin-compiler.git _deploy
          cd _deploy
          rm -rf compiler eclib
          tar xzvf ../compiler/$TARBALL.tgz
          mv $TARBALL/ compiler
          mv ../eclib .
          git add compiler eclib
          git commit -m "Jasmin compiler on branch ${{ github.ref_name }} at ${{ github.sha }}" || true
          git push --set-upstream origin ${{ github.ref_name }}
